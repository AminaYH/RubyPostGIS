<!--<!DOCTYPE html>-->
<!--<html lang="en">-->
<!--<head>-->
<!--  <meta charset="UTF-8">-->
<!--  <meta name="viewport" content="width=device-width, initial-scale=1.0">-->
<!--  <title>Display a map in Cesium JS</title>-->
<!--  <script src="https://cesium.com/downloads/cesiumjs/releases/1.116/Build/Cesium/Cesium.js"></script>-->
<!--  <link href="https://cesium.com/downloads/cesiumjs/releases/1.116/Build/Cesium/Widgets/widgets.css" rel="stylesheet">-->
<!--  <style>-->
<!--      body {-->
<!--          margin: 0;-->
<!--          padding: 0;-->
<!--      }-->
<!--      #cesiumContainer {position: absolute; top: 0; right: 0; bottom: 0; left: 0;}-->
<!--  </style>-->
<!--</head>-->
<!--<body>-->
<!--<div id="cesiumContainer">-->
<!--  <a href="https://www.maptiler.com" style="position:absolute;right:10px;bottom:10px;z-index:999;"><img src="https://api.maptiler.com/resources/logo.svg" alt="MapTiler logo"></a>-->
<!--</div>-->
<!--</body>-->
<!--<script>-->
<!--    const key = 'WVwivc9aoI1eTAvWjg6w	';-->
<!--    const viewer = new Cesium.Viewer('cesiumContainer', {-->
<!--        animation: false,-->
<!--        baseLayerPicker: false,-->
<!--        navigationHelpButton: false,-->
<!--        sceneModePicker: false,-->
<!--        homeButton: false,-->
<!--        geocoder: false,-->
<!--        fullscreenButton: false,-->
<!--        timeline: false,-->
<!--        terrain: new Cesium.Terrain(Cesium.CesiumTerrainProvider.fromUrl(`https://api.maptiler.com/tiles/terrain-quantized-mesh-v2/?key=${key}`, {-->
<!--            credit: new Cesium.Credit("\u003ca href=\"https://www.maptiler.com/copyright/\" target=\"_blank\"\u003e\u0026copy;MapTiler\u003c/a\u003e \u003ca href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\"\u003e\u0026copy; OpenStreetMap contributors\u003c/a\u003e", true),-->
<!--            requestVertexNormals: true-->
<!--        })),-->
<!--        baseLayer: new Cesium.ImageryLayer( new Cesium.UrlTemplateImageryProvider({-->
<!--            url: `https://api.maptiler.com/tiles/satellite-v2/{z}/{x}/{y}.jpg?key=${key}`,-->
<!--            minimumLevel: 0,-->
<!--            maximumLevel: 20,-->
<!--            tileWidth: 512,-->
<!--            tileHeight: 512,-->
<!--            credit: new Cesium.Credit("\u003ca href=\"https://www.maptiler.com/copyright/\" target=\"_blank\"\u003e\u0026copy; MapTiler\u003c/a\u003e \u003ca href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\"\u003e\u0026copy; OpenStreetMap contributors\u003c/a\u003e", true)-->
<!--        })),-->
<!--    });-->
<!--    viewer.camera.setView({-->
<!--        destination: Cesium.Cartesian3.fromDegrees(8.67, 46.72, 4500),-->
<!--        orientation: {-->
<!--            pitch: Cesium.Math.toRadians(-20)-->
<!--        }-->
<!--    });-->
<!--</script>-->
<!--</html>-->
<div id="map" style="height: 600px;"></div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.2.0/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.2.0/dist/leaflet-src.js"></script>
<script src="https://cdn.rawgit.com/aparshin/leaflet-boundary-canvas/f00b4d35/src/BoundaryCanvas.js"></script>

<script>
    var map = L.map('map');

    $.getJSON('https://raw.githubusercontent.com/johan/world.geo.json/master/countries/FRA.geo.json').then(function(geoJSON) {

        var osm = new L.TileLayer.BoundaryCanvas("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
            boundary: geoJSON,
            attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors, France shape <a href="https://github.com/johan/world.geo.json">johan/world.geo.json</a>'
        });

        map.addLayer(osm);

        var franceLayer = L.geoJSON(geoJSON, {
            style: {
                color: 'blue',
                weight: 2,
                fillColor: 'none',
                fillOpacity: 0.0
            }
        }).addTo(map);

        fetch('/red_zones')
          .then(response => response.json())
          .then(data => {
              var selectedZone = null;
              var originalStyle = {
                  color: 'red',
                  weight: 2,
                  opacity: 0.6
              };
              var selectedStyle = {
                  color: 'green',
                  weight: 3,
                  opacity: 0.8
              };

              data.forEach(zone => {
                  const geojsonLayer = L.geoJSON(zone.geom, {
                      style: originalStyle,
                      onEachFeature: function(feature, layer) {
                          layer.on('click', function(e) {
                              if (selectedZone) {
                                  selectedZone.setStyle(originalStyle);
                              }
                              selectedZone = e.target;
                              e.target.setStyle(selectedStyle);
                          });
                      }
                  }).addTo(map);
                  map.fitBounds(geojsonLayer.getBounds());
              });
          })
          .catch(error => console.error('Error fetching red zones:', error));

        map.fitBounds(franceLayer.getBounds());
    });
</script>
